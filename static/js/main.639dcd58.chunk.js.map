{"version":3,"sources":["simple/Simplecalculator.js","App.js","serviceWorker.js","index.js"],"names":["Simplecalculator","state","operand1","operand2","op","temp","fun1","e","setState","target","value","operation","final","alert","parseFloat","parseInt","plusminus","erase","onCero","sub","toString","minus","substring","length","classes","this","props","md","xs","className","root","AppBar","position","color","Toolbar","Typography","title","style","padding","Grid","container","item","Card","margin","boxShadow","CardContent","textbox","id","type","readOnly","label","button","each","onClick","eachac","Component","withStyles","theme","flexGrow","display","backgroundColor","width","height","fontSize","textAlign","App","history","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.639dcd58.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  button: {\r\n    display: 'block',\r\n    backgroundColor: 'white'\r\n  },\r\n  eachac: {\r\n    width: '25%',\r\n    height: '50px',\r\n    fontSize: '25px',\r\n    backgroundColor: 'pink',\r\n    color: ' black'\r\n  },\r\n \r\n  each: {\r\n    width: '25%',\r\n    height: '50px',\r\n    fontSize: '25px',\r\n    backgroundColor: 'blue',\r\n    color: ' white'\r\n  },\r\n \r\n  \r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'center',\r\n    fontSize:\"25px\"\r\n  },\r\n  textbox: {\r\n    height: '60px',\r\n    backgroundColor: '#bbb',\r\n    width: '98%',\r\n    fontSize:'25px',\r\n    textAlign : 'right',\r\n  }\r\n});\r\n\r\n\r\nclass Simplecalculator extends Component {\r\n  state = {\r\n    operand1:0,\r\n    operand2:'',\r\n    op:'',\r\n    temp:0\r\n  }\r\n  \r\n  fun1=(e)=>{\r\n    if(this.state.temp===1){\r\n      // alert(e.target.value)\r\nthis.setState({\r\n  operand1:\"\",\r\n  temp:0\r\n})\r\nthis.setState({\r\n  operand1:e.target.value\r\n})\r\n    }else{\r\n    if(this.state.operand1===0)\r\n    {\r\n        this.setState({\r\n    operand1:e.target.value\r\n        });\r\n    }\r\n    else{\r\n    this.setState({\r\n        operand1:this.state.operand1+e.target.value\r\n    })\r\n}\r\n}\r\n};\r\noperation=(e)=>{\r\n  if(this.state.operand1!==\"\"){\r\n  this.setState({\r\n      operand2:this.state.operand1,\r\n      op:e.target.value,\r\n      operand1:''\r\n  })\r\n}\r\n}\r\nfinal=(e)=>{\r\n  if(this.state.operand2!==\"\" && this.state.operand1===\"\")\r\n  alert(\"Select second operand\");\r\n  if((this.state.operand2!==\"\" && this.state.op!==\"\") && (this.state.operand1!==\"\")){\r\n this.setState({\r\n    temp:1\r\n })\r\n    this.setState({\r\n      operand1:this.state.operand1+e.target.value,\r\n  })\r\n  if(this.state.op===\"+\")\r\n  {\r\n     this.setState({\r\n      operand1:parseFloat(this.state.operand2)+parseFloat(this.state.operand1)\r\n     })\r\n  }\r\n  if(this.state.op===\"-\")\r\n  {\r\n     this.setState({\r\n      operand1:parseFloat(this.state.operand2)-parseFloat(this.state.operand1)\r\n     })\r\n  }\r\n  if(this.state.op===\"*\")\r\n  {\r\n     this.setState({\r\n      operand1:parseInt(this.state.operand2)*parseInt(this.state.operand1)\r\n     })\r\n  }\r\n  if(this.state.op===\"/\")\r\n  {\r\n     this.setState({\r\n      operand1:parseInt(this.state.operand2)/parseInt(this.state.operand1)\r\n     })\r\n  }\r\n  if(this.state.op===\"%\")\r\n  {\r\n     this.setState({\r\n      operand1:parseInt(this.state.operand2)%parseInt(this.state.operand1)\r\n     })\r\n}\r\n  }\r\n  this.setState({\r\n    operand2:\"\",\r\n    op:\"\"\r\n  })\r\n}\r\nplusminus=(e)=>{\r\n  if((this.state.operand1[0])==='-')\r\n  {\r\n    this.setState({\r\n      operand1:this.state.operand1\r\n  })\r\n  }\r\n  else{\r\n  this.setState({\r\n    operand1:-(this.state.operand1)\r\n})\r\n  }\r\n}\r\nerase=()=>{\r\n    this.setState({\r\n        operand1:0\r\n    })\r\n}\r\nonCero = () => {\r\n  var sub=(this.state.operand1).toString();\r\n  var minus=sub.substring(0,1);\r\n  if(sub.length===2 && minus===\"-\")\r\n  this.setState({\r\noperand1:\"\"\r\n  })\r\n  else{\r\n  this.setState({\r\n  operand1:sub.substring(0,sub.length-1)\r\n  }) \r\n}\r\n};\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div md={12} xs={12}>\r\n        <div className={classes.root}>\r\n          <AppBar position=\"fixed\" color=\"secondary\">\r\n            <Toolbar>\r\n              <Typography  className={classes.title}>\r\n               SIMPLE CALCULATOR\r\n                            </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div style={{ padding: \"40px\" }}>\r\n          <Grid container>\r\n            <Grid item md={4} />\r\n            <Grid item md={4}>\r\n              <Card style={{\r\n                margin: \"auto\",\r\n                boxShadow: \"0px 0px 5px 5px rgba(0,0,0,0.3)\",\r\n                \"&:hover\": {\r\n                  boxShadow: \"0 16px 30px 12.125px rgba(0,0,0,0.3)\"\r\n                }\r\n              }}>\r\n                <CardContent>\r\n\r\n                  <input\r\n                    className={classes.textbox} id=\"display\" type=\"text\" readOnly value={this.state.operand1} label=\"Firstname\" />\r\n                  <div className={classes.button}>\r\n                    <button className={classes.each} value=\"C\" id=\"C\" onClick={(e)=>this.erase(e)}>C</button>\r\n                    <button className={classes.each} value=\"&#177;\" id=\"&#177;\" onClick={(e)=>this.plusminus(e)}>&#177;</button>\r\n                    <button className={classes.each} value=\"%\" id=\"%\" onClick={(e)=>this.operation(e)}>%</button>\r\n                    <button className={classes.eachac} value=\"AC\" id=\"AC\" onClick={(e)=>this.onCero(e)}>AC</button>\r\n\r\n                    <button className={classes.each} value=\"7\" id=\"7\" onClick={(e)=>this.fun1(e)}>7</button>\r\n                    <button className={classes.each} value=\"8\" id=\"8\" onClick={(e)=>this.fun1(e)}>8</button>\r\n                    <button className={classes.each} value=\"9\" id=\"9\" onClick={(e)=>this.fun1(e)}>9</button>\r\n                    <button className={classes.each} value=\"+\" id=\"+\" onClick={(e)=>this.operation(e)}>+</button>\r\n\r\n                    \r\n                    <button className={classes.each} value=\"4\" id=\"4\" onClick={(e)=>this.fun1(e)}>4</button>\r\n                    <button className={classes.each} value=\"5\" id=\"5\" onClick={(e)=>this.fun1(e)}>5</button>\r\n                    <button className={classes.each} value=\"6\" id=\"6\" onClick={(e)=>this.fun1(e)}>6</button>\r\n                    <button className={classes.each} value=\"-\" id=\"-\" onClick={(e)=>this.operation(e)}>-</button>\r\n\r\n                    \r\n                    <button className={classes.each} value=\"1\" id=\"1\" onClick={(e)=>this.fun1(e)}>1</button>\r\n                    <button className={classes.each} value=\"2\" id=\"2\" onClick={(e)=>this.fun1(e)}>2</button>\r\n                    <button className={classes.each} value=\"3\" id=\"3\" onClick={(e)=>this.fun1(e)}>3</button>\r\n                    <button className={classes.each} value=\"*\" id=\"*\" onClick={(e)=>this.operation(e)}>*</button>\r\n\r\n                    <button className={classes.each} value=\"0\" id=\"0\" onClick={(e)=>this.fun1(e)}>0</button>\r\n                    <button className={classes.each} value=\".\" id=\".\" onClick={(e)=>this.fun1(e)}>.</button>\r\n                    <button className={classes.eachac} value=\"=\" id=\"=\" onClick={(e)=>this.final(e)}>=</button>\r\n                    <button className={classes.each} value=\"/\" id=\"/\" onClick={(e)=>this.operation(e)}>/</button>\r\n                   </div>                  \r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item md={4} />\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Simplecalculator);\r\n","import React,{Component} from 'react';\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom';\nimport { createBrowserHistory as history} from 'history';\nimport Simplecalculator from './simple/Simplecalculator';\n\nclass App extends Component {\n  render(){\n  return (\n    <Router history={history }>\n    <div>\n    <Switch>\n<Route path=\"/\" exact component={Simplecalculator}/>\n</Switch>\n</div>\n</Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}